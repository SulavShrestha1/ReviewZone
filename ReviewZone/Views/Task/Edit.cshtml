@model ReviewZone.Models.TaskModel

@{ ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml"; }

<link href="~/Content/CSS/Taskcreate.css" rel="stylesheet" />
<main id="clx-page-content" role="main" class="page-content ">
    <div class="row">
        <div class="col-md-12">
            <div class="panel">
                <div class="panel-hdr">
                    <h2><span></span>Edit Task</h2>
                    <div class="panel-toolbar">
                        <div class="btn-group">
                            <a href="@Url.Action("GetAllTask", "Task")" class="btn btn-secondary waves-effect waves-themed"> Cancel</a>
                        </div>
                    </div>
                </div>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    @Html.HiddenFor(model => model.Task_ID)
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="panel-container show" id="ibox_form">
                        <div class="panel-content">
                            <div class="px-2">
                                <form id="rform">
                                    <div class="row align-items-center justify-content-center">
                                        <div class="col-md-6 col-sm-12">
                                            <div class="mb-3 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label h6  col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Evaluator_ID, htmlAttributes: new { @class = "control-label h6  col-md-4" })
                                                    <div class="col-md-10">

                                                        @Html.DropDownListFor(model => model.Evaluator.FullName, ViewBag.evaluatorList as SelectList, "--Select Evaluator--", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.Evaluator_ID, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <span class="help-block"><a href="#" id="contact_add">| Or Add New Employee</a> </span>
                                            </div>
                                            <div class="mb-3 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label h6  col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.AssignedTo, htmlAttributes: new { @class = "control-label h6  col-md-4" })
                                                    <div class="col-md-10">

                                                        @Html.DropDownListFor(model => model.AssignedTo, ViewBag.employeeList as SelectList, "--Select Assigned Employee--", new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <span class="help-block"><a href="#" id="contact_add">| Or Add New Employee</a> </span>
                                            </div>
                                            <div class="mb-3 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label h6  col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="mb-3 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label h6  col-md-2" })
                                                    <div class="col-md-10">
                                                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row align-items-center justify-content-center">
                                        <div class="col-md-6">
                                            <div class="mb-3 mt-3">
                                                @if (User.Identity.IsAuthenticated)
                                                {
                                                    if (User.IsInRole("admin") || User.IsInRole("evaluator"))
                                                    {
                                                        <button class="btn btn-primary mr-3 waves-effect waves-themed" value="Save" type="submit" id="submit">
                                                            <i class="fas fa-save">
                                                            </i>
                                                            Save
                                                        </button>
                                                        <a onclick="DeleteBtn()" class="btn btn-danger mr-3 ml-3 waves-effect waves-themed has-tooltip">
                                                            <i class="fas fa-trash-alt">
                                                            </i>
                                                            Delete
                                                        </a>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>}
            </div>
        </div>
    </div>
</main>
<script>
    function ShowSuccessMsg() {
        swal("Task Updated!", "Task Has Been Succesfully Updated!", "success")
            .then(function () {
                window.location = "/Task/GetAllTask";
            });
    }
    function ShowFailure() {
        swal("Invalid Inputs!", "Task Cannot be created!", "error");
    }

    function DeleteBtn() {

        var Task_ID = $("#Task_ID").val();
        swal({
            title: "Are you sure?",
            text: "Once deleted, you will not be able to recover this task!",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        })
            .then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        type: "POST",
                        url: '/Task/Delete?id=' + Task_ID,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            if (response.success) {
                                swal(response.responseText, {
                                    icon: "success",
                                }).then(function () {
                                    window.location.href = "/Task/GetAllTask"
                                });
                            } else {
                                swal("Cannot Be Deleted!", response.responseText, "error");
                            }

                        },
                        failure: function (response) {
                            alert(response.responseText);
                        },
                        error: function (response) {
                            alert(response.responseText);
                        }
                    });
                } else {
                    swal("Your task is safe!");
                }
            });
    }
    const myDatePicker = MCDatepicker.create({
        el: '#DueDate',
    })
</script>
@if (ViewBag.JavaScriptFunction != null)
{
<script type="text/javascript">
        @Html.Raw(ViewBag.JavaScriptFunction)
</script>}
